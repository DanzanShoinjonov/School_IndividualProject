import emoji
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import Message
from aiogram.types import CallbackQuery
import logging
from constants2 import *
from keyboards2 import *




logging.basicConfig(level=logging.INFO)
bot = Bot(API)
dp = Dispatcher(bot)


async def on_startup(_):
    print(emoji.emojize('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!:rocket: :rocket: :rocket:'))




@dp.message_handler(commands=['help'])            #(–†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É - '/help') –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
async def help_command(message: types.Message):
    await message.reply(text=emoji.emojize('–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, —Ç–æ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: üëâ @shooinj'))
    await message.answer(text=HELP_COMMANDS,
                        parse_mode='HTML')


@dp.message_handler(commands=['start'])            #(–†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É - '/start') –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
async def send_welcome(message: types.Message):
    await message.answer(text=emoji.emojize('–ü—Ä–∏–≤–µ—Ç!\n–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram.!:raised_hand:'),
                         parse_mode='HTML',
                         reply_markup=kb_base)
    await message.delete()


@dp.message_handler(commands=['description'])
async def descrip_command(message: types.Message):
    await message.answer(text='–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –µ–≥–æ –∞–≤—Ç–æ—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è –®–æ–π–Ω–∂–æ–Ω–æ–≤ –î–∞–Ω–∑–∞–Ω.\n–î–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ\
                        —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–∏ –¥–µ–ª!',
                         parse_mode='HTML')
    await message.delete()


@dp.message_handler(lambda message: message.text == "üë§–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_button_press(message: Message):
    username = message.from_user.username
    await message.answer(text='–¢–≤–æ—ë –∏–º—è: @{}'.format(username))
    await message.answer(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–ª:')
    await message.answer(text='–û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:')


@dp.message_handler(lambda message: message.text == "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def timetable_button_press(message: Message):
    await message.answer(text='–¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:', reply_markup=timetable_keyboard)




@dp.message_handler(commands=['evaluate_the_bot'])     #–æ—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ 5-—Ç–∏ –±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ
async def evaluate(message: types.Message):

    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ –±–æ—Ç–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5',
                        reply_markup =e0)




@dp.callback_query_handler()
async def evaluate_callback(callback: types.CallbackQuery):
    if callback.data == 'very bad':
        await callback.answer(text='‚òπ‚òπ‚òπ')
    if callback.data == 'bad':
        await callback.answer('üò¢ —è –±—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è...')
    if callback.data == 'not good':
        await callback.answer('„ãõ –ó–Ω–∞—á–∏—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ª—É—á—à–µ „ãõ')
    if callback.data == 'good':
        await callback.answer('–°–ø–∞—Å–∏–±–æ, —Å—Ç–∞—Ä–∞—é—Å—å –¥–∞–ª—å—à–µ.')
    if callback.data == 'very good':
        await callback.answer('üòÅ –ò–¥–µ–∞–ª—å–Ω–æ? –£—Ä–∞!')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)