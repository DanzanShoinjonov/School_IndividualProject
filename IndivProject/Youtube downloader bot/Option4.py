import logging
import emoji
import os
from pytube import YouTube
from aiogram import Bot, Dispatcher, executor, types
from constants4 import *
from keyboards4 import *
import datetime
from datetime import timedelta

logging.basicConfig(level=logging.INFO)
bot = Bot(API)
dp = Dispatcher(bot)


async def on_startup(_):
    print(emoji.emojize('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!:rocket: :rocket: :rocket:'))


@dp.message_handler(commands=['help'])            #(–†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É - '/help') –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
async def help_command(message: types.Message):
    await message.reply(text=emoji.emojize('–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, —Ç–æ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: üëâ @shooinj'))
    await message.answer(text=HELP_COMMANDS,
                        parse_mode='HTML')


@dp.message_handler(commands=['start'])            #(–†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É - '/start') –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
async def send_welcome(message: types.Message):
    await message.answer(text=emoji.emojize('–ü—Ä–∏–≤–µ—Ç!\n–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram.!:raised_hand:\n–ë–æ—Ç —É–º–µ–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –Æ—Ç—É–±–∞, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —è –ø–ª–∞–Ω–∏—Ä—É—é –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!'),
                         parse_mode='HTML',
                         reply_markup=kb_base)
    await message.delete()


@dp.message_handler(commands=['description'])
async def descrip_command(message: types.Message):
    await message.answer(text='–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –µ–≥–æ –∞–≤—Ç–æ—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è –®–æ–π–Ω–∂–æ–Ω–æ–≤ –î–∞–Ω–∑–∞–Ω.',
                         parse_mode='HTML')


@dp.message_handler(commands=['Youtube_video_download'])
async def a_answer(message: types.Message):
    await message.answer(text='–°–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –≤–∏–¥–µ–æ —Å —é—Ç—É–±–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Å–∫–∞—á–∞—Ç—å.', parse_mode='HTML')


@dp.message_handler()
async def y_download(message: types.Message):
    text = message.text
    if text == message.text.startswith('https://youtube.be/') or message.text.startswith(
            'https://www.youtube.com/') or message.text.startswith('https://youtu.be/'):
        url = message.text
        yt = YouTube(url)
        title = yt.title
        resolution = yt.streams.get_highest_resolution().resolution
        file_size = yt.streams.get_highest_resolution().filesize
        picture = yt.thumbnail_url

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å", callback_data="download"))
        await message.answer_photo(f'{picture}', caption=f"üìπ <b>{title}</b> <a href='{url}'>‚Üí</a> \n"
                                                         f"‚öôÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ‚Äî</b> <code>{resolution}</code> \n"
                                                         f"üóÇ <b>–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ ‚Äî</b> <code>{round(file_size * 0.000001, 2)}MB</code>",
                                   parse_mode='HTML', reply_markup=keyboard)
    else:
        await message.answer(f"‚ùóÔ∏è<b>–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É!</b>", parse_mode='HTML')


@dp.callback_query_handler(text="download")
async def button_download(call: types.CallbackQuery):
    url = call.message.html_text
    yt = YouTube(url)
    title = yt.title
    author = yt.author
    resolution = yt.streams.get_highest_resolution().resolution
    stream = yt.streams.filter(progressive=True, file_extension="mp4")
    stream.get_highest_resolution().download(f'{call.message.chat.id}', f'{call.message.chat.id}_{yt.title}')
    with open(f"{call.message.chat.id}/{call.message.chat.id}_{yt.title}", 'rb') as video:
        await bot.send_video(call.message.chat.id, video, caption=f"üìπ <b>{title}</b> \n"  # Title#
                                                                  f"üë§ <b>{author}</b> \n\n"  # Author Of Channel#
                                                                  f"‚öôÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–∏—è ‚Äî</b> <code>{resolution}</code> \n"
                                                                  f"üì• <b>–°–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @Individual_Project_product_bot</b>",
                             parse_mode='HTML')
        os.remove(f"{call.message.chat.id}/{call.message.chat.id}_{yt.title}")



@dp.message_handler(commands=['evaluate_the_bot'])     #–æ—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ 5-—Ç–∏ –±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ
async def evaluate(message: types.Message):

    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ –±–æ—Ç–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5',
                        reply_markup =e0)

@dp.callback_query_handler()
async def evaluate_callback(callback: types.CallbackQuery):
    if callback.data == 'very bad':
        await callback.answer(text='‚òπ‚òπ‚òπ')
    if callback.data == 'bad':
        await callback.answer('üò¢ —è –±—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è...')
    if callback.data == 'not good':
        await callback.answer('„ãõ –ó–Ω–∞—á–∏—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ª—É—á—à–µ „ãõ')
    if callback.data == 'good':
        await callback.answer('–°–ø–∞—Å–∏–±–æ, —Å—Ç–∞—Ä–∞—é—Å—å –¥–∞–ª—å—à–µ.')
    if callback.data == 'very good':
        await callback.answer('üòÅ –ò–¥–µ–∞–ª—å–Ω–æ? –£—Ä–∞!')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)