import logging
import emoji
import os
from pytube import YouTube
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import Message
from constants import *
from keyboards import *
from aiogram.types import CallbackQuery
import datetime
from datetime import timedelta
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
import telebot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.handler import CancelHandler
from aiogram.types import ParseMode
import time
import aiogram.utils.markdown as md
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
import asyncio

API_TOKEN = ''

# Configure logging
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# A list to store tasks
tasks = []

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?")
    await message.answer("/start: –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º\n/help: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n/profile: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/addtask: –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É\n/listtasks: —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏",
                         reply_markup=kb_base)

@dp.message_handler(commands='help')
async def cmd_help(message: types.Message):
    await message.answer("–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ! –ï—Å–ª–∏ —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω: @shooinj")

@ dp.message_handler(commands='üë§–ü—Ä–æ—Ñ–∏–ª—å', state='*')
async   def cmd_show_profile(message: Message):
    user = message.from_user
    await bot.send_message(message.chat.id, f'User: {user.full_name} \nUsername: @{user.username}')


@dp.message_handler(commands='–î–æ–±–∞–≤–∏—Ç—å_–ó–∞–¥–∞—á—É')
async def cmd_add_task(message: types.Message):
    args = message.get_args().split(' ', 2)
    if len(args) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        return
    task_text = " ".join(args[:-1])
    deadline = args[-1]
    deadline = datetime.datetime.strptime(deadline, '%Y-%m-%d %H:%M')
    task = (task_text, deadline)
    tasks.append(task)
    await message.answer(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text} —Å–æ —Å—Ä–æ–∫–æ–º {deadline}")
    asyncio.create_task(notify_about_task(task, bot, message.from_user.id))


# @dp.message_handler(commands='addtask')                                 !!!!!!!!!!!!!BAD WORKING!!!!!!!!!!!!
# async def cmd_add(message: types.Message):
#     args = message.get_args().split()
#     if len(args) < 2:
#         await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
#         return
#
#     task_text = ' '.join(args[:-1])
#     deadline = args[-1]
#
#     try:
#         deadline = datetime.strptime(deadline, '%Y-%m-%d %H:%M')
#     except ValueError:
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—Ä–∞–π–Ω–µ–≥–æ —Å—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM")
#         return
#
#     task = {'text': task_text, 'deadline': deadline}
#     tasks.append(task)
#
#     await message.answer("Task added: {} (deadline: {})".format(task_text, deadline.strftime('%Y-%m-%d %H:%M')))
#
#     async def notify_about_deadline(task):
#         now = datetime.now()
#         if task['deadline'] - now < timedelta(seconds=0):
#             return
#
#         await asyncio.sleep((task['deadline'] - now).total_seconds())
#         await bot.send_message(chat_id=message.from_user.id,
#                                text="Deadline for '{}' is approaching".format(task['text']))
#
#     asyncio.create_task(notify_about_deadline(task))

# async def send_notifications():
#     while True:
#         for user_id, task in tasks.copy().items():
#             task_text, deadline = task
#             if time.time() >= deadline:
#                 await bot.send_message(
#                     chat_id=user_id,
#                     text=f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è '{task_text}' –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!"
#                 )
#                 del tasks[user_id]
#         time.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É–π –º–∏–Ω—É—Ç—É

@dp.message_handler(commands='–°–ø–∏—Å–æ–∫_–ó–∞–¥–∞—á')
async def cmd_list_tasks(message: types.Message):
    response = "\n".join([f"{task[0]} —Å–æ —Å—Ä–æ–∫–æ–º {task[1]}" for task in tasks])
    await message.answer(f"–í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{response}")

@dp.message_handler(commands='–°–ø–∏—Å–æ–∫_–ó–∞–¥–∞—á')
async def cmd_list_tasks(message: types.Message):
    task_keyboard = []
    for i, task in enumerate(tasks):
        task_keyboard.append([
            InlineKeyboardButton(
                f"{task[0]} —Å–æ —Å—Ä–æ–∫–æ–º {task[1]}",
                callback_data=f"delete_task_{i}"
            )
        ])

    reply_markup = InlineKeyboardMarkup(task_keyboard)
    await message.answer("–í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delete_task_'))
async def process_callback_delete_task(callback_query: CallbackQuery):
    task_index = int(callback_query.data.split("_")[-1])
    task = tasks.pop(task_index)
    await callback_query.answer(f"–ó–∞–¥–∞—á–∞ {task[0]} —Å –ø–µ—Ä–∏–æ–¥–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {task[1]} —É–¥–∞–ª–µ–Ω–∞")
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="Here are your tasks:",
        reply_markup=InlineKeyboardMarkup([])
    )

async def notify_about_task(task, bot, user_id):
    await asyncio.sleep((task[1] - datetime.now()).total_seconds())
    await bot.send_message(chat_id=user_id, text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏–∏: {task[0]}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    #executor.run_task(send_notifications)